diff -N -r -u original/src/cmd/ksh93/edit/edit.c build_ioctl/src/cmd/ksh93/edit/edit.c
--- src/cmd/ksh93/edit/edit.c	2012-05-23 21:08:25.000000000 +0200
+++ src/cmd/ksh93/edit/edit.c	2012-07-30 08:39:48.351239528 +0200
@@ -55,6 +55,8 @@
 static char KILL_LINE[20] = { ESC, '[', 'J', 0 };
 
 
+/* Repeat syscall in expr each time it gets hit with EINTR */
+#define EINTR_REPEAT(expr) while((expr) && (errno == EINTR)) errno=0;
 
 #if SHOPT_MULTIBYTE
 #   define is_cntrl(c)	((c<=STRIP) && iscntrl(c))
@@ -240,13 +242,13 @@
 #ifdef L_MASK
 	/* restore flags */
 	if(l_changed&L_MASK)
-		ioctl(fd,TIOCLSET,&l_mask);
+		EINTR_REPEAT(ioctl(fd,TIOCLSET,&l_mask)==-1);
 	if(l_changed&T_CHARS)
 		/* restore alternate break character */
-		ioctl(fd,TIOCSETC,&l_ttychars);
+		EINTR_REPEAT(ioctl(fd,TIOCSETC,&l_ttychars)==-1);
 	if(l_changed&L_CHARS)
 		/* restore alternate break character */
-		ioctl(fd,TIOCSLTC,&l_chars);
+		EINTR_REPEAT(ioctl(fd,TIOCSLTC,&l_chars)==-1);
 	l_changed = 0;
 #endif	/* L_MASK */
 	/*** don't do tty_set unless ttyparm has valid data ***/
@@ -264,6 +266,7 @@
 
 int tty_raw(register int fd, int echomode)
 {
+	int iores;
 	int echo = echomode;
 #ifdef L_MASK
 	struct ltchars lchars;
@@ -307,13 +310,15 @@
 	ep->e_ttyspeed = (ttyparm.sg_ospeed>=B1200?FAST:SLOW);
 #   ifdef TIOCGLTC
 	/* try to remove effect of ^V  and ^Y and ^O */
-	if(ioctl(fd,TIOCGLTC,&l_chars) != SYSERR)
+	EINTR_REPEAT((iores=ioctl(fd,TIOCGLTC,&l_chars)) == -1);
+	if(iores != SYSERR)
 	{
 		lchars = l_chars;
 		lchars.t_lnextc = -1;
 		lchars.t_flushc = -1;
 		lchars.t_dsuspc = -1;	/* no delayed stop process signal */
-		if(ioctl(fd,TIOCSLTC,&lchars) != SYSERR)
+		EINTR_REPEAT((iores=ioctl(fd,TIOCSLTC,&lchars)) == -1);
+		if(iores != SYSERR)
 			l_changed |= L_CHARS;
 	}
 #   endif	/* TIOCGLTC */
@@ -395,6 +400,7 @@
 	register Edit_t *ep = (Edit_t*)(shgd->ed_context);
 	int mask;
 	struct tchars ttychars;
+	int iores;
 	switch(ep->e_raw)
 	{
 	    case ECHOMODE:
@@ -411,21 +417,25 @@
 			ep->e_ttyspeed = (ttyparm.sg_ospeed>=B1200?FAST:SLOW);
 		ep->e_raw = ALTMODE;
 	}
-	if(ioctl(fd,TIOCGETC,&l_ttychars) == SYSERR)
+	EINTR_REPEAT((iores=ioctl(fd,TIOCGETC,&l_ttychars))==-1):
+	if(iores == SYSERR)
 		return(-1);
-	if(ioctl(fd,TIOCLGET,&l_mask)==SYSERR)
+	EINTR_REPEAT((iores=ioctl(fd,TIOCLGET,&l_mask))==-1);
+	if(iores==SYSERR)
 		return(-1);
 	ttychars = l_ttychars;
 	mask =  LCRTBS|LCRTERA|LCTLECH|LPENDIN|LCRTKIL;
 	if((l_mask|mask) != l_mask)
 		l_changed = L_MASK;
-	if(ioctl(fd,TIOCLBIS,&mask)==SYSERR)
+	EINTR_REPEAT((iores=ioctl(fd,TIOCLBIS,&mask))==-1);
+	if(iores==SYSERR)
 		return(-1);
 	if(ttychars.t_brkc!=ESC)
 	{
 		ttychars.t_brkc = ESC;
 		l_changed |= T_CHARS;
-		if(ioctl(fd,TIOCSETC,&ttychars) == SYSERR)
+		EINTR_REPEAT((iores=ioctl(fd,TIOCSETC,&ttychars))==-1);
+		if(iores == SYSERR)
 			return(-1);
 	}
 	return(0);
@@ -1501,9 +1511,11 @@
 	register int r,i;
 	ep->e_tcgeta = 0;
 	ep->e_echoctl = (ECHOCTL!=0);
-	if((r=ioctl(fd,TCGETS,tt))>=0 ||  errno!=EINVAL)
+	EINTR_REPEAT((r=ioctl(fd,TCGETS,tt)) == -1);
+	if(r>=0 || errno!=EINVAL)
 		return(r);
-	if((r=ioctl(fd,TCGETA,&ott)) >= 0)
+	EINTR_REPEAT((r=ioctl(fd,TCGETA,&ott)) == -1);
+	if(r >= 0)
 	{
 		tt->c_lflag = ott.c_lflag;
 		tt->c_oflag = ott.c_oflag;
@@ -1521,6 +1533,7 @@
 {
 	register Edit_t *ep = (Edit_t*)(shgd->ed_context);
 	register int r;
+	int iores;
 	if(ep->e_tcgeta)
 	{
 		register int i;
@@ -1550,9 +1563,11 @@
 			case TCSAFLUSH:
 				mode = TCSETAF;
 		}
-		return(ioctl(fd,mode,&ott));
+		EINTR_REPEAT(iores=ioctl(fd,mode,&ott)) == -1);
+		return(iores);
 	}
-	return(ioctl(fd,mode,tt));
+	EINTR_REPEAT((iores=ioctl(fd,mode,tt)) == -1);
+	return(iores);
 }
 #endif /* SHOPT_OLDTERMIO */
 
diff -N -r -u original/src/cmd/ksh93/edit/vi.c build_ioctl/src/cmd/ksh93/edit/vi.c
--- src/cmd/ksh93/edit/vi.c	2012-07-06 17:26:06.000000000 +0200
+++ src/cmd/ksh93/edit/vi.c	2012-07-30 08:31:14.118704342 +0200
@@ -95,6 +95,9 @@
 #define iswascii(c)	(!((c)&(~0177)))
 #endif
 
+/* Repeat syscall in expr each time it gets hit with EINTR */
+#define EINTR_REPEAT(expr) while((expr) && (errno == EINTR)) errno=0;
+
 typedef struct _vi_
 {
 	int direction;
@@ -255,7 +258,7 @@
 			return(reexit?reedit:ed_read(context, fd, shbuf, nchar,0));
 
 #ifdef FIORDCHK
-		ioctl(fd,FIORDCHK,&vp->typeahead);
+		EINTR_REPEAT(ioctl(fd,FIORDCHK,&vp->typeahead)==-1);
 #else
 		/* time the current line to determine typeahead */
 		oldtime = times(&dummy);
diff -N -r -u original/src/cmd/ksh93/include/terminal.h build_ioctl/src/cmd/ksh93/include/terminal.h
--- src/cmd/ksh93/include/terminal.h	2003-03-21 18:36:21.000000000 +0100
+++ src/cmd/ksh93/include/terminal.h	2012-07-30 09:06:38.097063579 +0200
@@ -29,6 +29,9 @@
  * This will use POSIX <termios.h> interface where available
  */
 
+/* Repeat syscall in expr each time it gets hit with EINTR */
+#define EINTR_REPEAT(expr) while((expr) && (errno == EINTR)) errno=0;
+
 #ifdef _hdr_termios
 #   include	<termios.h>
 #   if __sgi__ || sgi	/* special hack to eliminate ^M problem */
@@ -70,9 +73,23 @@
 #   endif /* TCSADFLUSH */
 #   ifndef _lib_tcgetattr
 #	undef  tcgetattr
-#	define tcgetattr(fd,tty)	ioctl(fd, TCGETS, tty)
+#	define tcgetattr(fd,tty) sh_tcgetattr((fd), (tty))	
+static
+int sh_tcgetattr(int fd, int tty)
+{
+	int iores;
+	EINTR_REPEAT((iores=ioctl(fd, TCGETS, tty)) == -1);
+	return iores;
+}
 #	undef  tcsetattr
-#	define tcsetattr(fd,action,tty)	ioctl(fd, action, tty)
+#	define tcsetattr(fd,action,tty) sh_tcsetattr((fd), (action), (tty))
+static
+int sh_tcsetattr(int fd, int action, int tty)
+{
+	int iores;
+	EINTR_REPEAT((iores=ioctl(fd, action, tty)) == -1);
+	return iores;
+}
 #	undef  cfgetospeed
 #	define cfgetospeed(tp)		((tp)->c_cflag & CBAUD)
 #   endif /* _lib_tcgetattr */
@@ -103,9 +120,22 @@
 #   ifdef _hdr_termio
 #	define termios termio
 #	undef TIOCGETC
-#	define tcgetattr(fd,tty)		ioctl(fd, TCGETA, tty)
-#	define tcsetattr(fd,action,tty)	ioctl(fd, action, tty)
-
+#	define tcgetattr(fd, tty) sh_tcgetattr((fd), (tty))
+static
+int sh_tcgetattr(int fd, int tty)
+{
+	int iores;
+	EINTR_REPEAT((iores=ioctl(fd, TCGETA, tty)) == -1);
+	return iores;
+}
+#	define tcsetattr(fd, action, tty) sh_tcsetattr((fd), (action), (tty))	
+static
+int sh_tcsetattr(int fd, int action, int tty)
+{
+	int iores;
+	EINTR_REPEAT((iores=ioctl(fd, action, tty)) == -1);
+	return iores;
+}
 #	ifdef _sys_bsdtty
 #	   include	<sys/bsdtty.h>
 #	endif /* _sys_bsdtty */
@@ -122,8 +152,22 @@
 #	 	undef TCSETAW
 #	    endif /* TIOCSETN */
 #	    ifdef TIOCGETP
-#		define tcgetattr(fd,tty)		ioctl(fd, TIOCGETP, tty)
-#		define tcsetattr(fd,action,tty)	ioctl(fd, action, tty)
+#		define tcgetattr(fd,tty) sh_tcgetattr((fd), (tty))
+static
+int sh_tcgetattr(int fd, int tty)
+{
+	int iores;
+	EINTR_REPEAT((iores=ioctl(fd, TIOCGETP, tty)) == -1);
+	return iores;
+}
+#		define tcsetattr(fd,action,tty)	 sh_tcsetattr((fd), (action), (tty))
+static int
+sh_tcsetattr(int fd, int action, int tty)
+{
+	int iores;
+	EINTR_REPEAT((iores=ioctl(fd, action, tty)) == -1);
+	return iores;
+}
 #	    else
 #		define tcgetattr(fd,tty)	gtty(fd, tty)
 #		define tcsetattr(fd,action,tty)	stty(fd, tty)
diff -N -r -u original/src/cmd/ksh93/sh/io.c build_ioctl/src/cmd/ksh93/sh/io.c
--- src/cmd/ksh93/sh/io.c	2012-07-24 22:54:30.000000000 +0200
+++ src/cmd/ksh93/sh/io.c	2012-07-30 09:34:49.859692112 +0200
@@ -44,6 +44,9 @@
 #include	"FEATURE/dynamic"
 #include	"FEATURE/poll"
 
+/* Repeat syscall in expr each time it gets hit with EINTR */
+#define EINTR_REPEAT(expr) while((expr) && (errno == EINTR)) errno=0;
+
 #ifdef	FNDELAY
 #   ifdef EAGAIN
 #	if EAGAIN!=EWOULDBLOCK
@@ -2138,7 +2141,7 @@
 				 * disabled it.  Not needed with edit mode
 				 */
 				int mode = LFLUSHO;
-				ioctl(sffileno(sfstderr),TIOCLBIC,&mode);
+				EINTR_REPEAT(ioctl(sffileno(sfstderr),TIOCLBIC,&mode) == -1);
 			}
 #endif	/* TIOCLBIC */
 			cp = sh_mactry(shp,nv_getval(sh_scoped(shp,PS1NOD)));
diff -N -r -u original/src/cmd/ksh93/sh/jobs.c build_ioctl/src/cmd/ksh93/sh/jobs.c
--- src/cmd/ksh93/sh/jobs.c	2012-07-24 20:09:27.000000000 +0200
+++ src/cmd/ksh93/sh/jobs.c	2012-07-30 08:49:02.271223782 +0200
@@ -35,6 +35,9 @@
 #include	"jobs.h"
 #include	"history.h"
 
+/* Repeat syscall in expr each time it gets hit with EINTR */
+#define EINTR_REPEAT(expr) while((expr) && (errno == EINTR)) errno=0;
+
 #if !defined(WCONTINUED) || !defined(WIFCONTINUED)
 #   undef  WCONTINUED
 #   define WCONTINUED	0
@@ -169,13 +172,15 @@
 #   ifndef _lib_tcgetpgrp
 #	ifdef TIOCGPGRP
 	   static int _i_;
-#	   define tcgetpgrp(a) (ioctl(a, TIOCGPGRP, &_i_)>=0?_i_:-1)	
+#	   define tcgetpgrp(a) EINTR_REPEAT((ioctl((a), TIOCGPGRP, &_i_)>=0?_i_:-1) == -1)	
 #	endif /* TIOCGPGRP */
 	int tcsetpgrp(int fd,pid_t pgrp)
 	{
 		int pgid = pgrp;
 #		ifdef TIOCGPGRP
-			return(ioctl(fd, TIOCSPGRP, &pgid));	
+			int iores;
+			EINTR_REPEAT((iores=ioctl(fd, TIOCSPGRP, &pgid)) == -1);
+			return(iores);	
 #		else
 			return(-1);
 #		endif /* TIOCGPGRP */
@@ -601,6 +606,7 @@
 void job_init(Shell_t *shp, int lflag)
 {
 	register int ntry=0;
+	int iores;
 	job.fd = JOBTTY;
 	signal(SIGCHLD,job_waitsafe);
 #   if defined(SIGCLD) && (SIGCLD!=SIGCHLD)
@@ -613,9 +619,11 @@
 	/* use new line discipline when available */
 #ifdef NTTYDISC
 #   ifdef FIOLOOKLD
-	if((job.linedisc = ioctl(JOBTTY, FIOLOOKLD, 0)) <0)
+	EINTR_REPEAT((job.linedisc = ioctl(JOBTTY, FIOLOOKLD, 0)) == -1);
+	if(job.linedisc <0)
 #   else
-	if(ioctl(JOBTTY,TIOCGETD,&job.linedisc) !=0)
+	EINTR_REPEAT((iores=ioctl(JOBTTY,TIOCGETD,&job.linedisc)) == -1);
+	if(iores!=0)
 #   endif /* FIOLOOKLD */
 		return;
 	if(job.linedisc!=NTTYDISC && job.linedisc!=OTTYDISC)
@@ -683,16 +691,19 @@
 		int linedisc = NTTYDISC;
 #   ifdef FIOPUSHLD
 		tty_get(JOBTTY,&my_stty);
-		if (ioctl(JOBTTY, FIOPOPLD, 0) < 0)
+		EINTR_REPEAT((iores=ioctl(JOBTTY, FIOPOPLD, 0)) == -1);
+		if (iores < 0)
 			return;
-		if (ioctl(JOBTTY, FIOPUSHLD, &linedisc) < 0)
+		EINTR_REPEAT((iores=ioctl(JOBTTY, FIOPUSHLD, &linedisc)) == -1);
+		if (iores < 0)
 		{
-			ioctl(JOBTTY, FIOPUSHLD, &job.linedisc);
+			EINTR_REPEAT(ioctl(JOBTTY, FIOPUSHLD, &job.linedisc) == -1);
 			return;
 		}
 		tty_set(JOBTTY,TCSANOW,&my_stty);
 #   else
-		if(ioctl(JOBTTY,TIOCSETD,&linedisc) !=0)
+		EINTR_REPEAT((iores=ioctl(JOBTTY,TIOCSETD,&linedisc)) == -1);
+		if(iores!=0)
 			return;
 #   endif /* FIOPUSHLD */
 		if(lflag==0)
@@ -792,17 +803,20 @@
 		/* restore old line discipline */
 #	ifdef FIOPUSHLD
 		tty_get(job.fd,&my_stty);
-		if (ioctl(job.fd, FIOPOPLD, 0) < 0)
+		EINTR_REPEAT((iores=ioctl(job.fd, FIOPOPLD, 0)) == -1);
+		if (iores < 0)
 			return(0);
-		if (ioctl(job.fd, FIOPUSHLD, &job.linedisc) < 0)
+		EINTR_REPEAT((iores=ioctl(job.fd, FIOPUSHLD, &job.linedisc)) == -1);
+		if (iores < 0)
 		{
 			job.linedisc = NTTYDISC;
-			ioctl(job.fd, FIOPUSHLD, &job.linedisc);
+			EINTR_REPEAT(ioctl(job.fd, FIOPUSHLD, &job.linedisc) == -1);
 			return(0);
 		}
 		tty_set(job.fd,TCSAFLUSH,&my_stty);
 #	else
-		if(ioctl(job.fd,TIOCSETD,&job.linedisc) !=0)
+		EINTR_REPEAT((iores=ioctl(job.fd,TIOCSETD,&job.linedisc)) == -1);
+		if(iores!=0)
 			return(0);
 #	endif /* FIOPUSHLD */
 		errormsg(SH_DICT,0,e_oldtty);
diff -N -r -u original/src/cmd/ksh93/tests/arrays.sh build_ioctl/src/cmd/ksh93/tests/arrays.sh
--- src/cmd/ksh93/tests/arrays.sh	2012-06-29 22:10:09.000000000 +0200
+++ src/cmd/ksh93/tests/arrays.sh	1970-01-01 01:00:00.000000000 +0100
@@ -1,670 +0,0 @@
-########################################################################
-#                                                                      #
-#               This software is part of the ast package               #
-#          Copyright (c) 1982-2012 AT&T Intellectual Property          #
-#                      and is licensed under the                       #
-#                 Eclipse Public License, Version 1.0                  #
-#                    by AT&T Intellectual Property                     #
-#                                                                      #
-#                A copy of the License is available at                 #
-#          http://www.eclipse.org/org/documents/epl-v10.html           #
-#         (with md5 checksum b35adb5213ca9657e911e9befb180842)         #
-#                                                                      #
-#              Information and Software Systems Research               #
-#                            AT&T Research                             #
-#                           Florham Park NJ                            #
-#                                                                      #
-#                  David Korn <dgk@research.att.com>                   #
-#                                                                      #
-########################################################################
-function err_exit
-{
-	print -u2 -n "\t"
-	print -u2 -r ${Command}[$1]: "${@:2}"
-	let Errors+=1
-}
-alias err_exit='err_exit $LINENO'
-
-Command=${0##*/}
-integer Errors=0
-
-tmp=$(mktemp -dt) || { err_exit mktemp -dt failed; exit 1; }
-trap "cd /; rm -rf $tmp" EXIT
-
-function fun
-{
-	integer i
-	unset xxx
-	for i in 0 1
-	do	xxx[$i]=$i
-	done
-}
-
-set -A x zero one two three four 'five six'
-if	[[ $x != zero ]]
-then	err_exit '$x is not element 0'
-fi
-if	[[ ${x[0]} != zero ]]
-then	err_exit '${x[0] is not element 0'
-fi
-if	(( ${#x[0]} != 4 ))
-then	err_exit "length of ${x[0]} is not 4"
-fi
-if	(( ${#x[@]} != 6  ))
-then	err_exit 'number of elements of x is not 6'
-fi
-if	[[ ${x[2]} != two  ]]
-then	err_exit ' element two is not 2'
-fi
-if	[[ ${x[@]:2:1} != two  ]]
-then	err_exit ' ${x[@]:2:1} is not two'
-fi
-set -A y -- ${x[*]}
-if	[[ $y != zero ]]
-then	err_exit '$x is not element 0'
-fi
-if	[[ ${y[0]} != zero ]]
-then	err_exit '${y[0] is not element 0'
-fi
-if	(( ${#y[@]} != 7  ))
-then	err_exit 'number of elements of y is not 7'
-fi
-if	[[ ${y[2]} != two  ]]
-then	err_exit ' element two is not 2'
-fi
-set +A y nine ten
-if	[[ ${y[2]} != two  ]]
-then	err_exit ' element two is not 2'
-fi
-if	[[ ${y[0]} != nine ]]
-then	err_exit '${y[0] is not nine'
-fi
-unset y[4]
-if	(( ${#y[@]} != 6  ))
-then	err_exit 'number of elements of y is not 6'
-fi
-if	(( ${#y[4]} != 0  ))
-then	err_exit 'string length of unset element is not 0'
-fi
-unset foo
-if	(( ${#foo[@]} != 0  ))
-then	err_exit 'number of elements of unset variable foo is not 0'
-fi
-foo=''
-if	(( ${#foo[0]} != 0  ))
-then	err_exit 'string length of null element is not 0'
-fi
-if	(( ${#foo[@]} != 1  ))
-then	err_exit 'number of elements of null variable foo is not 1'
-fi
-unset foo
-foo[0]=foo
-foo[3]=bar
-unset foo[0]
-unset foo[3]
-if	(( ${#foo[@]} != 0  ))
-then	err_exit 'number of elements of left in variable foo is not 0'
-fi
-unset foo
-foo[3]=bar
-foo[0]=foo
-unset foo[3]
-unset foo[0]
-if	(( ${#foo[@]} != 0  ))
-then	err_exit 'number of elements of left in variable foo again is not 0'
-fi
-fun
-if	(( ${#xxx[@]} != 2  ))
-then	err_exit 'number of elements of left in variable xxx is not 2'
-fi
-fun
-if	(( ${#xxx[@]} != 2  ))
-then	err_exit 'number of elements of left in variable xxx again is not 2'
-fi
-set -A foo -- "${x[@]}"
-if	(( ${#foo[@]} != 6  ))
-then	err_exit 'number of elements of foo is not 6'
-fi
-if	(( ${#PWD[@]} != 1  ))
-then	err_exit 'number of elements of PWD is not 1'
-fi
-unset x
-x[2]=foo x[4]=bar
-if	(( ${#x[@]} != 2  ))
-then	err_exit 'number of elements of x is not 2'
-fi
-s[1]=1 c[1]=foo
-if	[[ ${c[s[1]]} != foo ]]
-then	err_exit 'c[1]=foo s[1]=1; ${c[s[1]]} != foo'
-fi
-unset s
-typeset -Ai s
-y=* z=[
-s[$y]=1
-s[$z]=2
-if	(( ${#s[@]} != 2  ))
-then	err_exit 'number of elements of  is not 2'
-fi
-(( s[$z] = s[$z] + ${s[$y]} ))
-if	[[ ${s[$z]} != 3  ]]
-then	err_exit '[[ ${s[$z]} != 3  ]]'
-fi
-if	(( s[$z] != 3 ))
-then	err_exit '(( s[$z] != 3 ))'
-fi
-(( s[$y] = s[$y] + ${s[$z]} ))
-if	[[ ${s[$y]} != 4  ]]
-then	err_exit '[[ ${s[$y]} != 4  ]]'
-fi
-if	(( s[$y] != 4 ))
-then	err_exit '(( s[$y] != 4 ))'
-fi
-set -A y 2 4 6
-typeset -i y
-z=${y[@]}
-typeset -R12 y
-typeset -i y
-if      [[ ${y[@]} != "$z" ]]
-then    err_exit 'error in array conversion from int to R12'
-fi
-if      (( ${#y[@]} != 3  ))
-then    err_exit 'error in count of array conversion from int to R12'
-fi
-unset abcdefg
-:  ${abcdefg[1]}
-set | grep '^abcdefg$' >/dev/null && err_exit 'empty array variable in set list'
-unset x y
-x=1
-typeset -i y[$x]=4
-if	[[ ${y[1]} != 4 ]]
-then    err_exit 'arithmetic expressions in typeset not working'
-fi
-unset foo
-typeset foo=bar
-typeset -A foo
-if	[[ ${foo[0]} != bar ]]
-then	err_exit 'initial value not preserved when typecast to associative'
-fi
-unset foo
-foo=(one two)
-typeset -A foo
-foo[two]=3
-if	[[ ${#foo[*]} != 3 ]]
-then	err_exit 'conversion of indexed to associative array failed'
-fi
-set a b c d e f g h i j k l m
-if	[[ ${#} != 13 ]]
-then	err_exit '${#} not 13'
-fi
-unset xxx
-xxx=foo
-if	[[ ${!xxx[@]} != 0 ]]
-then	err_exit '${!xxx[@]} for scalar not 0'
-fi
-if	[[ ${11} != k ]]
-then	err_exit '${11} not working'
-fi
-if	[[ ${@:4:1} != d ]]
-then	err_exit '${@:4:1} not working'
-fi
-foovar1=abc
-foovar2=def
-if	[[ ${!foovar@} != +(foovar[[:alnum:]]?([ ])) ]]
-then	err_exit '${!foovar@} does not expand correctly'
-fi
-if	[[ ${!foovar1} != foovar1 ]]
-then	err_exit '${!foovar1} != foovar1'
-fi
-unset xxx
-: ${xxx[3]}
-if	[[ ${!xxx[@]} ]]
-then	err_exit '${!xxx[@]} should be null'
-fi
-integer i=0
-{
-	set -x
-	xxx[++i]=1
-	set +x
-} 2> /dev/null
-if	(( i != 1))
-then	err_exit 'execution trace side effects with array subscripts'
-fi
-unset list
-: $(set -A list foo bar)
-if	(( ${#list[@]} != 0))
-then	err_exit '$(set -A list ...) leaves side effects'
-fi
-unset list
-list= (foo bar bam)
-( set -A list one two three four)
-if	[[ ${list[1]} != bar ]]
-then	err_exit 'array not restored after subshell'
-fi
-XPATH=/bin:/usr/bin:/usr/ucb:/usr/local/bin:.:/sbin:/usr/sbin
-xpath=( $( IFS=: ; echo $XPATH ) )
-if	[[ $(print -r  "${xpath[@]##*/}") != 'bin bin ucb bin . sbin sbin' ]]
-then	err_exit '${xpath[@]##*/} not applied to each element'
-fi
-foo=( zero one '' three four '' six)
-integer n=-1
-if	[[ ${foo[@]:n} != six ]]
-then	err_exit 'array offset of -1 not working'
-fi
-if	[[ ${foo[@]: -3:1} != four ]]
-then	err_exit 'array offset of -3:1 not working'
-fi
-$SHELL -c 'x=(if then else fi)' 2> /dev/null  || err_exit 'reserved words in x=() assignment not working'
-unset foo
-foo=one
-foo=( $foo two)
-if	[[ ${#foo[@]} != 2 ]]
-then	err_exit 'array getting unset before right hand side evaluation'
-fi
-foo=(143 3643 38732)
-export foo
-typeset -i foo
-if	[[ $($SHELL -c 'print $foo') != 143 ]]
-then	err_exit 'exporting indexed array not exporting 0-th element'
-fi
-( $SHELL   -c '
-	unset foo
-	typeset -A foo=([0]=143 [1]=3643 [2]=38732)
-	export foo
-	typeset -i foo
-	[[ $($SHELL -c "print $foo") == 143 ]]'
-) 2> /dev/null ||
-		err_exit 'exporting associative array not exporting 0-th element'
-unset foo
-typeset -A foo
-foo[$((10))]=ok 2> /dev/null || err_exit 'arithmetic expression as subscript not working'
-unset foo
-typeset -A foo
-integer foo=0
-[[ $foo == 0 ]] || err_exit 'zero element of associative array not being set'
-unset foo
-typeset -A foo=( [two]=1)
-for i in one three four five
-do	: ${foo[$i]}
-done
-if	[[ ${!foo[@]} != two ]]
-then	err_exit 'error in subscript names'
-fi
-unset x
-x=( 1 2 3)
-(x[1]=8)
-[[ ${x[1]} == 2 ]] || err_exit 'index array produce side effects in subshells'
-x=( 1 2 3)
-(
-	x+=(8)
-	[[ ${#x[@]} == 4 ]] || err_exit 'index array append in subshell error'
-)
-[[ ${#x[@]} == 3 ]] || err_exit 'index array append in subshell effects parent'
-x=( [one]=1 [two]=2 [three]=3)
-(x[two]=8)
-[[ ${x[two]} == 2 ]] || err_exit 'associative array produce side effects in subshells'
-unset x
-x=( [one]=1 [two]=2 [three]=3)
-(
-	x+=( [four]=4 )
-	[[ ${#x[@]} == 4 ]] || err_exit 'associative array append in subshell error'
-)
-[[ ${#x[@]} == 3 ]] || err_exit 'associative array append in subshell effects parent'
-unset x
-integer i
-for ((i=0; i < 40; i++))
-do	x[i]=$i
-done
-[[  ${#x[@]} == 40 ]] || err_exit 'index arrays loosing values'
-[[ $( ($SHELL -c 'typeset -A var; (IFS=: ; set -A var a:b:c ;print ${var[@]});:' )2>/dev/null) == 'a b c' ]] || err_exit 'change associative to index failed'
-unset foo
-[[ $(foo=good
-for ((i=0; i < 2; i++))
-do	[[ ${foo[i]} ]] && print ok
-done) == ok ]] || err_exit 'invalid optimization for subscripted variables'
-(
-x=([foo]=bar)
-set +A x bam
-) 2> /dev/null && err_exit 'set +A with associative array should be an error'
-unset bam foo
-foo=0
-typeset -A bam
-unset bam[foo]
-bam[foo]=value
-[[ $bam == value ]] && err_exit 'unset associative array element error'
-: only first element of an array can be exported
-unset bam
-print 'print ${var[0]} ${var[1]}' > $tmp/script
-chmod +x $tmp/script
-[[ $($SHELL -c "var=(foo bar);export var;$tmp/script") == foo ]] || err_exit 'export array not exporting just first element'
-
-unset foo
-set --allexport
-foo=one
-foo[1]=two
-foo[0]=three
-[[ $foo == three ]] || err_exit '--allexport not working with arrays'
-set --noallexport
-unset foo
-
-cat > $tmp/script <<- \!
-	typeset -A foo
-	print foo${foo[abc]}
-!
-[[ $($SHELL -c "typeset -A foo;$tmp/script")  == foo ]] 2> /dev/null || err_exit 'empty associative arrays not being cleared correctly before scripts'
-[[ $($SHELL -c "typeset -A foo;foo[abc]=abc;$tmp/script") == foo ]] 2> /dev/null || err_exit 'associative arrays not being cleared correctly before scripts'
-unset foo
-foo=(one two)
-[[ ${foo[@]:1} == two ]] || err_exit '${foo[@]:1} == two'
-[[ ! ${foo[@]:2} ]] || err_exit '${foo[@]:2} not null'
-unset foo
-foo=one
-[[ ! ${foo[@]:1} ]] || err_exit '${foo[@]:1} not null'
-function EMPTY
-{
-        typeset i
-        typeset -n ARRAY=$1
-        for i in ${!ARRAY[@]}
-        do      unset ARRAY[$i]
-        done
-}
-unset foo
-typeset -A foo
-foo[bar]=bam
-foo[x]=y
-EMPTY foo
-[[ $(typeset | grep foo$) == *associative* ]] || err_exit 'array lost associative attribute'
-[[ ! ${foo[@]}  ]] || err_exit 'array not empty'
-[[ ! ${!foo[@]}  ]] || err_exit 'array names not empty'
-unset foo
-foo=bar
-set -- "${foo[@]:1}"
-(( $# == 0 )) || err_exit '${foo[@]:1} should not have any values'
-unset bar
-exp=4
-: ${_foo[bar=4]}
-(( bar == 4 )) || err_exit "subscript of unset variable not evaluated -- expected '4', got '$got'"
-unset bar
-: ${_foo[bar=$exp]}
-(( bar == $exp )) || err_exit "subscript of unset variable not evaluated -- expected '$exp', got '$got'"
-unset foo bar
-foo[5]=4
-bar[4]=3
-bar[0]=foo
-foo[0]=bam
-foo[4]=5
-[[ ${!foo[2+2]} == 'foo[4]' ]] || err_exit '${!var[sub]} should be var[sub]'
-[[ ${bar[${foo[5]}]} == 3 ]] || err_exit  'array subscript cannot be an array instance'
-[[ $bar[4] == 3 ]] || err_exit '$bar[x] != ${bar[x]} inside [[ ]]'
-(( $bar[4] == 3  )) || err_exit '$bar[x] != ${bar[x]} inside (( ))'
-[[ $bar[$foo[5]] == 3 ]]  || err_exit '$bar[foo[x]] != ${bar[foo[x]]} inside [[ ]]'
-(( $bar[$foo[5]] == 3  )) || err_exit '$bar[foo[x]] != ${bar[foo[x]]} inside (( ))'
-x=$bar[4]
-[[ $x == 4 ]] && err_exit '$bar[4] should not be an array in an assignment'
-x=${bar[$foo[5]]}
-(( $x == 3 )) || err_exit '${bar[$foo[sub]]} not working'
-[[ $($SHELL  <<- \++EOF+++
-	typeset -i test_variable=0
-	typeset -A test_array
-	test_array[1]=100
-	read test_array[2] <<-!
-	2
-	!
-	read test_array[3] <<-!
-	3
-	!
-	test_array[3]=4
-	print "val=${test_array[3]}"
-++EOF+++
-) == val=4 ]] 2> /dev/null || err_exit 'after reading array[j] and assign array[j] fails'
-[[ $($SHELL <<- \+++EOF+++
-	pastebin=( typeset -a form)
-	pastebin.form+=( name="name"   data="clueless" )
-	print -r -- ${pastebin.form[0].name}
-+++EOF+++
-) == name ]] 2> /dev/null ||  err_exit 'indexed array in compound variable not working'
-unset foo bar
-: ${foo[bar=2]}
-[[ $bar == 2 ]] || err_exit 'subscript not evaluated for unset variable'
-unset foo bar
-bar=1
-typeset -a foo=([1]=ok [2]=no)
-[[ $foo[bar] == ok ]] || err_exit 'typeset -a not working for simple assignment'
-unset foo
-typeset -a foo=([1]=(x=ok) [2]=(x=no))
-[[ $(typeset | grep 'foo$') == *index* ]] || err_exit 'typeset -a not creating an indexed array'
-foo+=([5]=good)
-[[ $(typeset | grep 'foo$') == *index* ]] || err_exit 'append to indexed array not preserving array type'
-unset foo
-typeset -A foo=([1]=ok [2]=no)
-[[ $foo[bar] == ok ]] && err_exit 'typeset -A not working for simple assignment'
-unset foo
-typeset -A foo=([1]=(x=ok) [2]=(x=no))
-[[ ${foo[bar].x} == ok ]] && err_exit 'typeset -A not working for compound assignment'
-[[ $($SHELL -c 'typeset -a foo;typeset | grep "foo$"'  2> /dev/null) == *index* ]] || err_exit 'typeset fails for indexed array with no elements'
-xxxxx=(one)
-[[ $(typeset | grep xxxxx$) == *'indexed array'* ]] || err_exit 'array of one element not an indexed array'
-unset foo
-foo[1]=(x=3 y=4)
-{ [[ ${!foo[1].*} == 'foo[1].x foo[1].y' ]] ;} 2> /dev/null || err_exit '${!foo[sub].*} not expanding correctly'
-unset x
-x=( typeset -a foo=( [0]="a" [1]="b" [2]="c" ))
-[[  ${@x.foo} == 'typeset -a'* ]] || err_exit 'x.foo is not an indexed array'
-x=( typeset -A foo=( [0]="a" [1]="b" [2]="c" ))
-[[  ${@x.foo} == 'typeset -A'* ]] || err_exit 'x.foo is not an associative array'
-$SHELL -c $'x=(foo\n\tbar\nbam\n)' 2> /dev/null || err_exit 'compound array assignment with new-lines not working'
-$SHELL -c $'x=(foo\n\tbar:\nbam\n)' 2> /dev/null || err_exit 'compound array assignment with labels not working'
-$SHELL -c $'x=(foo\n\tdone\nbam\n)' 2> /dev/null || err_exit 'compound array assignment with reserved words not working'
-[[ $($SHELL -c 'typeset -A A; print $(( A[foo].bar ))' 2> /dev/null) == 0 ]] || err_exit 'unset variable not evaluating to 0'
-unset a
-typeset -A a
-a[a].z=1
-a[z].z=2
-unset a[a]
-[[ ${!a[@]} == z ]] || err_exit '"unset a[a]" unsets entire array'
-unset a
-a=([x]=1 [y]=2 [z]=(foo=3 bar=4))
-eval "b=$(printf "%B\n" a)"
-eval "c=$(printf "%#B\n" a)"
-[[ ${a[*]} == "${b[*]}" ]] || err_exit 'printf %B not preserving values for arrays'
-[[ ${a[*]} == "${c[*]}" ]] || err_exit 'printf %#B not preserving values for arrays'
-unset a
-a=(zero one two three four)
-a[6]=six
-[[ ${a[-1]} == six ]] || err_exit 'a[-1] should be six'
-[[ ${a[-3]} == four ]] || err_exit 'a[-3] should be four'
-[[ ${a[-3..-1]} == 'four six' ]] || err_exit "a[-3,-1] should be 'four six'"
-
-FILTER=(typeset scope)
-FILTER[0].scope=include
-FILTER[1].scope=exclude
-[[ ${#FILTER[@]} == 2 ]] ||  err_exit "FILTER array should have two elements not ${#FILTER[@]}"
-
-unset x
-function x.get
-{
-	print sub=${.sh.subscript}
-}
-x[2]=
-z=$(: ${x[1]} )
-[[ $z == sub=1 ]] || err_exit 'get function not invoked for index array'
-
-unset x
-typeset -A x
-function x.get
-{
-	print sub=${.sh.subscript}
-}
-x[2]=
-z=$(: ${x[1]} )
-[[ $z == sub=1 ]] || err_exit 'get function not invoked for associative array'
-
-unset y
-i=1
-a=(11 22)
-typeset -m y=a[i]
-[[ $y == 22 ]] || err_exit 'typeset -m for index array not working'
-[[ ${a[i]} || ${a[0]} != 11 ]] && err_exit 'typeset -m for index array not deleting element'
-
-unset y
-a=([0]=11 [1]=22)
-typeset -m y=a[$i]
-[[ $y == 22 ]] || err_exit 'typeset -m for associative array not working'
-[[ ${a[$i]} || ${a[0]} != 11 ]] && err_exit 'typeset -m for associative array not deleting element'
-unset x a j
-
-typeset -a a=( [0]="aa" [1]="bb" [2]="cc" )
-typeset -m 'j=a[0]'
-typeset -m 'a[0]=a[1]'
-typeset -m 'a[1]=j'
-[[ ${a[@]} == 'bb aa cc' ]] || err_exit 'moving index array elements not working'
-unset a j
-
-typeset -A a=( [0]="aa" [1]="bb" [2]="cc" )
-typeset -m 'j=a[0]'
-typeset -m 'a[0]=a[1]'
-typeset -m 'a[1]=j'
-[[ ${a[@]} == 'bb aa cc' ]] || err_exit 'moving associative array elements not working'
-unset a j
-
-z=(a b c)
-unset x
-typeset -m x[1]=z
-[[ ${x[1][@]} == 'a b c' ]] || err_exit 'moving indexed array to index array element not working'
-
-unset x z
-z=([0]=a [1]=b [2]=c)
-typeset -m x[1]=z
-[[ ${x[1][@]} == 'a b c' ]] || err_exit 'moving associative array to index array element not working'
-
-{
-typeset -a arr=(
-	float
-)
-} 2> /dev/null
-[[ ${arr[0]} == float ]] || err_exit 'typeset -a should not expand alias for float'
-unset arr
-
-{
-typeset -r -a arr=(
-	float
-)
-} 2> /dev/null
-[[ ${arr[0]} == float ]] || err_exit 'typeset -r -a should not expand alias for float'
-{
-typeset -a arr2=(
-	typeset +r
-)
-} 2> /dev/null
-[[ ${arr2[0]} == typeset ]] || err_exit 'typeset -a should not process declarations'
-unset arr2
-
-$SHELL 2> /dev/null -c $'typeset -a arr=(\nfor)' || err_exit 'typeset -a should allow reserved words as first argument'
-
-$SHELL 2> /dev/null -c $'typeset -r -a arr=(\nfor)' || err_exit 'typeset -r -a should allow reserved words as first argument'
-
-typeset arr2[6]
-[[ ${#arr2[@]} == 0 ]] || err_exit 'declartion "typeset array[6]" should not show any elements'
-
-arr2[1]=def
-[[ ${arr2[1]} == def ]] || err_exit 'declaration "typeset array[6]" causes arrays causes wrong side effects'
-
-unset foo
-typeset foo[7]
-[[ ${#foo[@]} == 0 ]] || err_exit 'typeset foo[7] should not have one element' 
-
-a=123 $SHELL  2> /dev/null -c 'integer a[5]=3 a[2]=4; unset a;x=0; ((a[++x]++));:' || err_exit 'unsetting array variable leaves side effect'
-
-unset foo
-foo=(aa bb cc)
-foo=( ${foo[@]:1} )
-[[ ${foo[@]} == 'bb cc' ]] || err_exit "indexed array assignment using parts of array for values gives wrong result of ${foo[@]}"
-
-unset foo
-foo=([xx]=aa [yy]=bb [zz]=cc)
-foo=( ${foo[yy]} ${foo[zz]} )
-[[ ${foo[@]} == 'bb cc' ]] || err_exit "associative array assignment using parts of array for values gives wrong result of ${foo[@]}"
-
-unset foo
-typeset -a foo=(abc=1 def=2)
-[[ ${foo[1]} == def=2 ]] || err_exit "index array with elements containing = not working"
-
-unset foo
-typeset -a foo=( a b )
-typeset -p foo[10]
-[[ ${!foo[@]} == '0 1' ]] || err_exit 'typeset -p foo[10] has side effect'
-
-unset foo
-exp='typeset -a foo=((11 22) (66) )'
-x=$(
-	typeset -a foo=( ( 11 22 ) ( 44 55 ) )
-	foo[1]=(66)
-	typeset -p foo
-) 2> /dev/null
-[[ $x == "$exp" ]] || err_exit 'setting element 1 to index fooay failed'
-unset foo
-exp='typeset -a foo=((11 22) (x=3))'
-x=$(
-	typeset -a foo=( ( 11 22 ) ( 44 55 ) )
-	foo[1]=(x=3)
-	typeset -p foo
-) 2> /dev/null
-[[ $x == "$exp" ]] || err_exit 'setting element 1 of array to compound variable failed'
-
-#test for cloning a very large index array - can core dump
-(	
-    trap 'x=$?;exit $(( $x!=0 ))' EXIT
-    $SHELL <<- \EOF
-	(
-		print '('
-		integer i
-		for ((i=0 ; i < 16384 ; i++ )) ; do
-                	printf '\tinteger var%i=%i\n' i i
-        	done
-        	printf 'typeset -a ar=(\n'
-		for ((i=0 ; i < 16384 ; i++ )) ; do
-			printf '\t[%d]=%d\n' i i
-		done
-		print ')'
-		print ')'
-	) | read -C hugecpv
-	compound hugecpv2=hugecpv
-	v=$(typeset -p hugecpv)
-	[[ ${v/hugecpv/hugecpv2} == "$(typeset -p hugecpv2)" ]]
-EOF
-) 2> /dev/null || err_exit 'copying a large array fails'
-
-unset foo
-typeset -a foo
-foo+=(bar)
-[[ ${foo[0]} == bar ]] || 'appending to empty array not working'
-
-unset isnull
-typeset -A isnull
-isnull[mdapp]=Y
-: ${isnull[@]}
-isnull[mdapp]=N
-[[ ${isnull[*]} != *N* ]] && err_exit 'bug after ${arr[@]} with one element associative array'
-
-unset arr2
-arr2=()
-typeset -A arr2
-unset arr2
-[[ $(typeset -p arr2) ]] && err_exit 'unset associative array of compound variables not working'
-
-arr3=(x=3)
-typeset -A arr3
-[[  $(typeset -p arr3) == 'typeset -A arr3=()' ]] || err_exit 'typeset -A does not first unset compound variable.'
-
-arr4=(x=3)
-typeset -a arr4
-[[  $(typeset -p arr4) == 'typeset -a arr4' ]] || err_exit 'typeset -a does not first unset compound variable.'
-
-alias foo=bar
-arr5=(foo bar)
-[[ $(typeset -p arr5) == 'typeset -a arr5=(foo bar)' ]] || err_exit 'typeset expanding non-declaration aliases'
-
-typeset -A Foo
-Foo=( [a]=AA;[b]=BB)
-[[ ${Foo[a]} == AA ]] || err_exit 'Fooa[a] is {Foo[a]} not AA' 
-
-exit $((Errors<125?Errors:125))
diff -N -r -u original/src/lib/libast/comp/fcntl.c build_ioctl/src/lib/libast/comp/fcntl.c
--- src/lib/libast/comp/fcntl.c	1995-02-24 18:12:50.000000000 +0100
+++ src/lib/libast/comp/fcntl.c	2012-07-30 09:19:16.766620033 +0200
@@ -27,6 +27,9 @@
 
 #include <ast.h>
 
+/* Repeat syscall in expr each time it gets hit with EINTR */
+#define EINTR_REPEAT(expr) while((expr) && (errno == EINTR)) errno=0;
+
 #ifndef fcntl
 
 NoN(fcntl)
@@ -74,7 +77,7 @@
 #if F_SETFD >= _ast_F_LOCAL && defined(FIOCLEX)
 	case F_SETFD:
 		n = va_arg(ap, int);
-		op = ioctl(fd, n == FD_CLOEXEC ? FIOCLEX : FIONCLEX, 0);
+		EINTR_REPEAT((op = ioctl(fd, n == FD_CLOEXEC ? FIOCLEX : FIONCLEX, 0)) == -1);
 		break;
 #endif
 	default:
diff -N -r -u original/src/lib/libast/comp/open.c build_ioctl/src/lib/libast/comp/open.c
--- src/lib/libast/comp/open.c	2004-07-19 23:13:05.000000000 +0200
+++ src/lib/libast/comp/open.c	2012-07-30 09:16:35.940571521 +0200
@@ -44,6 +44,9 @@
 #include <ast_tty.h>
 #endif
 
+/* Repeat syscall in expr each time it gets hit with EINTR */
+#define EINTR_REPEAT(expr) while((expr) && (errno == EINTR)) errno=0;
+
 int
 _ast_open(const char* path, int op, ...)
 {
@@ -106,8 +109,13 @@
 			else if ((op & O_APPEND) && lseek(fd, 0L, SEEK_END) == -1L)
 				errno = save_errno;
 #if O_NOCTTY
-			if ((op & O_NOCTTY) && ioctl(fd, TIOCNOTTY, 0))
-				errno = save_errno;
+			if (op & O_NOCTTY)
+			{
+				int iores;
+				EINTR_REPEAT((iores=ioctl(fd, TIOCNOTTY, 0)) == -1);
+				if (iores)
+					errno = save_errno;
+			}
 #endif
 			break;
 		}
diff -N -r -u original/src/lib/libast/comp/setsid.c build_ioctl/src/lib/libast/comp/setsid.c
--- src/lib/libast/comp/setsid.c	2012-06-19 21:26:34.000000000 +0200
+++ src/lib/libast/comp/setsid.c	2012-07-30 09:18:27.044749762 +0200
@@ -23,6 +23,9 @@
 
 #include <ast.h>
 
+/* Repeat syscall in expr each time it gets hit with EINTR */
+#define EINTR_REPEAT(expr) while((expr) && (errno == EINTR)) errno=0;
+
 #if _lib_setsid
 
 NoN(setsid)
@@ -42,6 +45,7 @@
 	int	pg;
 #ifdef TIOCNOTTY
 	int	fd;
+	int	iores;
 #endif
 
 	/*
@@ -59,11 +63,11 @@
 	/*
 	 * drop the control tty
 	 */
-
-	if ((fd = open("/dev/tty", O_RDONLY|O_cloexec)) >= 0)
+	EINTR_REPEAT((fd = open("/dev/tty", O_RDONLY|O_cloexec)) < 0);
+	if (fd >= 0)
 	{
-		ioctl(fd, TIOCNOTTY, 0);
-		close(fd);
+		EINTR_REPEAT(ioctl(fd, TIOCNOTTY, 0) == -1);
+		EINTR_REPEAT(close(fd) < 0);
 	}
 #else
 
diff -N -r -u original/src/lib/libast/comp/spawnveg.c build_ioctl/src/lib/libast/comp/spawnveg.c
--- src/lib/libast/comp/spawnveg.c	2012-02-29 22:29:44.000000000 +0100
+++ src/lib/libast/comp/spawnveg.c	2012-07-30 09:13:20.893237883 +0200
@@ -44,6 +44,9 @@
 #include <error.h>
 #include <wait.h>
 
+/* Repeat syscall in expr each time it gets hit with EINTR */
+#define EINTR_REPEAT(expr) while((expr) && (errno == EINTR)) errno=0;
+
 pid_t
 spawnveg(const char* path, char* const argv[], char* const envv[], pid_t pgid)
 {
@@ -220,7 +223,7 @@
 #else
 #ifdef TIOCSPGRP
 			if (m)
-				ioctl(2, TIOCSPGRP, &pgid);
+				EINTR_REPEAT(ioctl(2, TIOCSPGRP, &pgid) == -1);
 #endif
 #endif
 		}
diff -N -r -u original/src/lib/libast/misc/procopen.c build_ioctl/src/lib/libast/misc/procopen.c
--- src/lib/libast/misc/procopen.c	2012-06-19 21:56:38.000000000 +0200
+++ src/lib/libast/misc/procopen.c	2012-07-30 09:12:20.421966681 +0200
@@ -36,6 +36,9 @@
 #include <ls.h>
 #include <ast_tty.h>
 
+/* Repeat syscall in expr each time it gets hit with EINTR */
+#define EINTR_REPEAT(expr) while((expr) && (errno == EINTR)) errno=0;
+
 /*
  * not quite ready for _use_spawnveg 
  */
@@ -159,6 +162,7 @@
 static int
 modify(Proc_t* proc, int forked, int op, long arg1, long arg2)
 {
+	int iores;
 #if _lib_fork
 	if (forked)
 	{
@@ -192,7 +196,8 @@
 					close(i);
 			arg2 = -1;
 #ifdef TIOCSCTTY
-			if (ioctl(arg1, TIOCSCTTY, NiL) < 0)
+			EINTR_REPEAT((iores=ioctl(arg1, TIOCSCTTY, NiL))==-1);
+			if (iores < 0)
 				return -1;
 #else
 			if (!(s = ttyname(arg1)))
diff -N -r -u original/src/lib/libast/port/astwinsize.c build_ioctl/src/lib/libast/port/astwinsize.c
--- src/lib/libast/port/astwinsize.c	2012-06-19 21:19:30.000000000 +0200
+++ src/lib/libast/port/astwinsize.c	2012-07-30 09:39:20.371842575 +0200
@@ -28,6 +28,10 @@
 
 #include <ast.h>
 #include <ast_tty.h>
+#include <errno.h>
+
+/* Repeat syscall in expr each time it gets hit with EINTR */
+#define EINTR_REPEAT(expr) while((expr) && (errno == EINTR)) errno=0;
 
 #if defined(__STDPP__directive) && defined(__STDPP__hide)
 __STDPP__directive pragma pp:hide ioctl sleep
@@ -124,19 +128,28 @@
 ttctl(register int fd, int op, void* tt)
 {
 	register int	v;
+	int iores;
 
 	if (fd < 0)
 	{
 		for (fd = 0; fd <= 2; fd++)
-			if (!ioctl(fd, op, tt)) return(0);
-		if ((fd = open("/dev/tty", O_RDONLY|O_cloexec)) >= 0)
+			EINTR_REPEAT((iores=ioctl(fd, op, tt)) == -1);
+			if (!iores)
+				return(0);
+		EINTR_REPEAT((fd = open("/dev/tty", O_RDONLY|O_cloexec)) < 0);
+		if (fd >= 0)
 		{
-			v = ioctl(fd, op, tt);
-			close(fd);
+			EINTR_REPEAT((v = ioctl(fd, op, tt)) == -1);
+			EINTR_REPEAT(close(fd)<0);
 			return(v);
 		}
 	}
-	else if (!ioctl(fd, op, tt)) return(0);
+	else
+	{
+		EINTR_REPEAT((iores=ioctl(fd, op, tt)) == -1);
+		if (!iores)
+			return(0);
+	}
 	return(-1);
 }
 
diff -N -r -u original/src/lib/libcmd/stty.c build_ioctl/src/lib/libcmd/stty.c
--- src/lib/libcmd/stty.c	2012-01-10 19:56:17.000000000 +0100
+++ src/lib/libcmd/stty.c	2012-07-30 09:40:17.101973372 +0200
@@ -26,7 +26,7 @@
  */
 
 static const char usage[] =
-"[-?@(#)$Id: stty (AT&T Research) 2010-04-01 $\n]"
+"[-?@(#)$Id: stty (AT&T Research) 2012-07-28 $\n]"
 USAGE_LICENSE
 "[+NAME?stty - set or get terminal modes]"
 "[+DESCRIPTION?\bstty\b sets certain terminal I/O modes for the device "
@@ -68,6 +68,9 @@
 #include	<sys/ioctl.h>
 #endif
 
+/* Repeat syscall in expr each time it gets hit with EINTR */
+#define EINTR_REPEAT(expr) while((expr) && (errno == EINTR)) errno=0;
+
 #define C(x)	ERROR_catalog(x)
 
 #ifndef _POSIX_VDISABLE
@@ -573,7 +576,7 @@
 #ifdef TIOCSWINSZ
 			{
 				struct winsize win;
-				off = ioctl(0,TIOCGWINSZ,&win);
+				EINTR_REPEAT((off = ioctl(0, TIOCGWINSZ, &win)) == -1);
 				if(off>=0)
 					sfprintf(sfstdout,"%sspeed %s baud; rows %d; columns %d;\n",schar,tp->name,win.ws_row,win.ws_col);
 			}
@@ -696,7 +699,9 @@
 		    {
 			struct winsize win;
 			int n;
-			if(ioctl(0,TIOCGWINSZ,&win)<0)
+			int iores;
+			EINTR_REPEAT((iores=ioctl(0,TIOCGWINSZ,&win)) == -1);
+			if(iores<0)
 				error(ERROR_system(1),"cannot set %s",tp->name);
 			if(!(cp= *argv))
 			{
@@ -711,7 +716,8 @@
 				win.ws_col = n;
 			else
 				win.ws_row = n;
-			if(ioctl(0,TIOCSWINSZ,&win)<0)
+			EINTR_REPEAT((iores=ioctl(0, TIOCSWINSZ, &win)) == -1);
+			if(iores<0)
 				error(ERROR_system(1),"cannot set %s",tp->name);
 			break;
 		    }
@@ -888,8 +894,15 @@
 
 #ifndef _lib_tcgetpgrp
 #  ifdef TIOCGPGRP
-	   static int _i_;
-#	   define tcgetpgrp(a) (ioctl(a, TIOCGPGRP, &_i_)>=0?_i_:-1)	
+#	   define tcgetpgrp(a) mytcgetpgrp((a))
+static
+int mytcgetpgrp(int a)
+{
+	int iores;
+	static int _i_; /* why is this |static| ? */
+	EINTR_REPEAT((iores=(ioctl(a, TIOCGPGRP, &_i_)>=0?_i_:-1)) == -1);
+	return iores;
+}
 #  else
 #	   define tcgetpgrp(a) (-1)
 #  endif /* TIOCGPGRP */
diff -N -r -u original/src/lib/libcmd/tty.c build_ioctl/src/lib/libcmd/tty.c
--- src/lib/libcmd/tty.c	2012-03-08 02:38:01.000000000 +0100
+++ src/lib/libcmd/tty.c	2012-07-30 09:34:25.783788292 +0200
@@ -27,7 +27,7 @@
  */
 
 static const char usage[] =
-"[-?\n@(#)$Id: tty (AT&T Research) 2008-03-13 $\n]"
+"[-?\n@(#)$Id: tty (AT&T Research) 2012-07-28 $\n]"
 USAGE_LICENSE
 "[+NAME?tty - write the name of the terminal to standard output]"
 "[+DESCRIPTION?\btty\b writes the name of the terminal that is connected "
@@ -53,6 +53,9 @@
 #include <sys/stermio.h>
 #endif
 
+/* Repeat syscall in expr each time it gets hit with EINTR */
+#define EINTR_REPEAT(expr) while((expr) && (errno == EINTR)) errno=0;
+
 int
 b_tty(int argc, char** argv, Shbltin_t* context)
 {
@@ -95,7 +98,8 @@
 	if(lflag)
 	{
 #if _mac_STWLINE
-		if ((n = ioctl(0, STWLINE, 0)) >= 0)
+		EINTR_REPEAT((n = ioctl(0, STWLINE, 0)) == -1);
+		if (n >= 0)
 			error(ERROR_OUTPUT, 1, "synchronous line %d", n);
 		else
 #endif
